name: workspace-tf-plan

on:
  # workflow_dispatch:
  workflow_call:
    inputs:
      apply_env:
        description: "Apply the environment"
        required: false
        type: boolean
        default: false
      artifact_name:
        description: "Name of the artifacts"
        required: false
        type: string
        default: tfplan-artifact-${{ github.sha }}
    outputs:
      tf_workspace:
        description: 'Terraform workspace based on reference branch pipeline'
        value: ${{ jobs.setup.outputs.tf_workspace_output }}
      artifcat_name:
        description: 'Artifact name for the terraform plan'
        value: ${{ inputs.artifact_name }}
      environment:
        description: 'Environment for the terraform plan'
        value: ${{ jobs.setup.outputs.environment }}

# OIDC permissions for keyless authentication
permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  setup:
    name: environment-check
    runs-on: ubuntu-24.04-arm
    environment: "${{ github.ref_name == 'main' && 'production' || 'development' }}"
    outputs:
      tf_workspace_output: ${{ steps.set-terraform-workspace.outputs.workspace }}
      artifact_name: ${{ steps.upload.outputs.artifact-id }}
      environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
      vars_file: ${{ steps.set-terraform-workspace.outputs.vars_file }}

    steps:
      - name: Check the given inputs
        run: |
          echo "Input Value for apply_env: ${{ inputs.apply_env }}"
      - name: Checkout repository
        id: clone-repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.aws_iam_role }}
          role-session-name: GitHub-Role-${{ github.run_id }}
          aws-region: ${{ vars.aws_region }}
      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3
      - name: Set Terraform workspace
        id: set-terraform-workspace
        run: |
          BRANCH="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME=$(echo "${{ github.head_ref || github.ref_name }}" | cut -d'-' -f2)
          echo "Full Branch name is: $BRANCH"
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "workspace=prod" >> $GITHUB_OUTPUT
            echo "vars_file=prod.tfvars" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" = "develop" ]; then
            echo "workspace=dev" >> $GITHUB_OUTPUT
            echo "vars_file=dev.tfvars" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == hotfix/* ]]; then
            echo "workspace=hotfix-$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "vars_file=prod.tfvars" >> $GITHUB_OUTPUT
          else
            echo "workspace=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "vars_file=feature.tfvars" >> $GITHUB_OUTPUT
          fi
      - name: Use output from above
        id: echo-workspace
        env:
            WORKSPACE_NAME: ${{ steps.set-terraform-workspace.outputs.workspace }}
        run: |
          echo "Output from above: ${{ steps.set-terraform-workspace.outputs.workspace }}"
          echo "workspace name from above: $WORKSPACE_NAME"
      - name: checking the environment variables
        id: reuse-values
        run: |
          echo  $BRANCH_NAME
      - name: Terraform Format
        id: fmt-init-validate
        working-directory: terraform
        run: |
          terraform fmt -recursive
          terraform init
          terraform validate -no-color
      - name: create workspace
        id: workspace-initiate
        working-directory: terraform
        env:
          TF_WORKSPACE_ENV: ${{ steps.set-terraform-workspace.outputs.workspace }}
          TF_VARS_FILE_ENV: ${{ steps.set-terraform-workspace.outputs.vars_file }}
        run: |
          echo "Using $TF_VARS_FILE_ENV file for running terraform"
          terraform workspace select $TF_WORKSPACE_ENV || terraform workspace new $TF_WORKSPACE_ENV
          terraform plan -var-file="$TF_VARS_FILE_ENV" -out=tfplan -lock=false
      - name: Terraform Apply
        if: ${{ inputs.apply_env }}
        working-directory: terraform
        run: terraform apply --auto-approve tfplan
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        id: upload
        with:
          name: ${{ inputs.artifact_name }}
          path: terraform
          retention-days: 1 # Retain for 7 days
    